name: AWS Autodeploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install deps (frontend)
        working-directory: app/frontend
        run: |
          npm ci || npm install
          npm run build

      - name: Terraform init/plan/apply
        working-directory: infra/terraform
        env:
          TF_VAR_project: suggestlyg4plusv2
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_tf_state_bucket: ${{ secrets.TF_STATE_BUCKET }}
          TF_VAR_tf_lock_table: ${{ secrets.TF_LOCK_TABLE }}
          TF_INPUT: false
        run: |
          terraform init -upgrade
          terraform apply -auto-approve
          echo "ECR_REPO=$(terraform output -raw ecr_repo)" >> $GITHUB_ENV
          echo "FRONTEND_BUCKET=$(terraform output -raw frontend_bucket)" >> $GITHUB_ENV
          echo "CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_domain)" >> $GITHUB_ENV
          echo "ALB_DNS=$(terraform output -raw alb_dns)" >> $GITHUB_ENV

      - name: Sync frontend to S3
        run: aws s3 sync app/frontend/build s3://$FRONTEND_BUCKET --delete

      - name: Build & Push backend image
        working-directory: app/backend
        run: |
          docker build -t $ECR_REPO:latest .
          docker push $ECR_REPO:latest

      - name: Force ECS rolling deploy
        env:
          PROJECT: suggestlyg4plusv2
        run: |
          aws ecs update-service \
            --cluster ${PROJECT}-cluster \
            --service ${PROJECT}-svc \
            --force-new-deployment
      - name: Show endpoints
        run: |
          echo "API via ALB:    http://$ALB_DNS"
          echo "Frontend CDN:   https://$CLOUDFRONT_DOMAIN"



