name: Deploy to Railway

# Triggers: Deploy on pushes to main branch and allow manual runs
on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Enables manual runs via Actions tab

# Concurrency: Cancel in-progress runs for the same ref to avoid overlapping deploys
concurrency:
  group: railway-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install the Railway CLI via the official install script and add it to PATH
      - name: Install Railway CLI
        run: |
          # Download and install Railway CLI using official install script
          curl -fsSL https://railway.app/install.sh | sh
          # Add Railway CLI to PATH for subsequent steps
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      # Step 3: Authenticate and link to the specified Railway Project and Service using secrets
      - name: Authenticate with Railway
        env:
          # Support both RAILWAY_API_TOKEN and RAILWAY_TOKEN by mapping both env vars
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || secrets.RAILWAY_TOKEN }}
        run: |
          # Authenticate with Railway using the API token
          railway login --token $RAILWAY_TOKEN
          
          # Link to the specified Railway project and service
          railway link ${{ secrets.RAILWAY_PROJECT_ID }} --service ${{ secrets.RAILWAY_SERVICE_ID }}

      # Step 4: Deploy using railway up in CI mode (non-interactive)
      - name: Deploy to Railway
        env:
          # Ensure Railway CLI runs in CI mode (non-interactive)
          CI: true
          # Support both secret names for Railway token
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_API_TOKEN || secrets.RAILWAY_TOKEN }}
        run: |
          # Deploy the application using Railway CLI in CI mode (non-interactive)
          railway up

# Notes for maintainers:
# 
# Secrets required in repository settings:
# - RAILWAY_API_TOKEN (or RAILWAY_TOKEN) — A Railway API token scoped to the user account
# - RAILWAY_PROJECT_ID — The Railway Project ID 
# - RAILWAY_SERVICE_ID — The Service ID within the project
#
# For monorepo setup:
# - Add working-directory to steps or configure path filters in triggers
# - Example: working-directory: ./my-app
#
# Application requirements:
# - Ensure the app listens on the PORT environment variable (Railway provides this)
# - Verify there's a valid start command in package.json or Dockerfile
# - The railway.json file in the repo root configures the build and start commands
#
# Environment variables:
# - Configure required environment variables in Railway dashboard (e.g., DATABASE_URL, API keys)
# - These should be set in Railway project settings, not in this workflow
#
# Networking and domains:
# - Public networking and custom domain settings can be managed in Railway dashboard
# - Railway automatically provides a public URL for web services
#
# Troubleshooting:
# - Check Railway dashboard for deployment logs and status
# - Verify all required secrets are properly configured in GitHub repository settings
# - Ensure Railway project and service IDs are correct