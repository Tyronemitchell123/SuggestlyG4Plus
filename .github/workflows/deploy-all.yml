name: 🚀 Deploy to All Services

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'

jobs:
  # Vercel Deployment
  deploy-vercel:
    name: 🎯 Deploy to Vercel
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Netlify Deployment
  deploy-netlify:
    name: 🌐 Deploy to Netlify
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Railway Deployment
  deploy-railway:
    name: 🚂 Deploy to Railway
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚂 Deploy to Railway
        uses: bervProject/railway-deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE }}

  # Firebase Deployment
  deploy-firebase:
    name: 🔥 Deploy to Firebase
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 🔥 Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}

  # GitHub Pages Deployment
  deploy-github-pages:
    name: 📄 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

  # Render Deployment
  deploy-render:
    name: 🎨 Deploy to Render
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 🚀 Deploy to Render
        uses: johnbeynon/render-deploy-action@v1.0.0
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  # Status Check
  deployment-status:
    name: ✅ Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-netlify, deploy-railway, deploy-firebase, deploy-github-pages, deploy-render]
    if: always()
    steps:
      - name: 📊 Check deployment status
        run: |
          echo "🚀 Deployment Status Report:"
          echo "Vercel: ${{ needs.deploy-vercel.result }}"
          echo "Netlify: ${{ needs.deploy-netlify.result }}"
          echo "Railway: ${{ needs.deploy-railway.result }}"
          echo "Firebase: ${{ needs.deploy-firebase.result }}"
          echo "GitHub Pages: ${{ needs.deploy-github-pages.result }}"
          echo "Render: ${{ needs.deploy-render.result }}"
          
          if [[ "${{ needs.deploy-vercel.result }}" == "success" ]] || \
             [[ "${{ needs.deploy-netlify.result }}" == "success" ]] || \
             [[ "${{ needs.deploy-railway.result }}" == "success" ]] || \
             [[ "${{ needs.deploy-firebase.result }}" == "success" ]] || \
             [[ "${{ needs.deploy-github-pages.result }}" == "success" ]] || \
             [[ "${{ needs.deploy-render.result }}" == "success" ]]; then
            echo "✅ At least one deployment succeeded!"
          else
            echo "❌ All deployments failed"
            exit 1
          fi




