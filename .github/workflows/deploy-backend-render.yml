name: Deploy Backend to Render

on:
  push:
    branches: ["main"]
    paths:
      - "src/**"
      - "requirements.txt"
      - "render.yaml"
      - ".github/workflows/deploy-backend-render.yml"
  workflow_dispatch: {}
  release:
    types: [published]

# Cancel any in-progress deploy for the same workflow and ref (branch/tag)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Render Blueprint Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    environment: ${{ startsWith(github.ref, 'refs/heads/main') && 'production' || 'staging' }}
    steps:
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ startsWith(github.ref, 'refs/heads/main') && secrets.RENDER_API_KEY || secrets.RENDER_STAGING_API_KEY }}
          RENDER_SERVICE_ID: ${{ startsWith(github.ref, 'refs/heads/main') && secrets.RENDER_SERVICE_ID || secrets.RENDER_STAGING_SERVICE_ID }}
          RENDER_DEPLOY_HOOK_URL: ${{ startsWith(github.ref, 'refs/heads/main') && secrets.RENDER_DEPLOY_HOOK_URL || secrets.RENDER_STAGING_DEPLOY_HOOK_URL }}
          REQUIRE_TAG_FOR_PROD: ${{ secrets.REQUIRE_TAG_FOR_PROD }}
          FAST_DEPLOY: ${{ secrets.FAST_DEPLOY }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${REQUIRE_TAG_FOR_PROD:-}" == "true" && "${GITHUB_EVENT_NAME:-}" != "release" ]]; then
            echo "Skipping production deploy: release publication required (REQUIRE_TAG_FOR_PROD=true)" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          if [[ -n "${RENDER_DEPLOY_HOOK_URL:-}" ]]; then
            echo "Triggering Render deploy via Deploy Hook"
            curl --retry 5 --retry-connrefused --retry-delay 2 --max-time 120 -fsSL -X POST "$RENDER_DEPLOY_HOOK_URL"
            echo "Deploy hook triggered" >> "$GITHUB_STEP_SUMMARY"
            if [[ "${FAST_DEPLOY:-}" == "true" ]]; then
              echo "FAST_DEPLOY enabled: not waiting for Render; exiting after hook trigger" | tee -a "$GITHUB_STEP_SUMMARY"
              exit 0
            fi
            exit 0
          fi
          if [[ -n "${RENDER_API_KEY:-}" && -n "${RENDER_SERVICE_ID:-}" ]]; then
            echo "Triggering Render deploy via API"
            # Trigger new deploy and capture response
            DEPLOY_JSON=$(curl --retry 5 --retry-connrefused --retry-delay 2 --max-time 120 -fsSL -X POST \
              -H "Authorization: Bearer $RENDER_API_KEY" \
              -H "Content-Type: application/json" \
              "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
              -d '{}')
            echo "API deploy triggered" >> "$GITHUB_STEP_SUMMARY"
            if [[ "${FAST_DEPLOY:-}" == "true" ]]; then
              echo "FAST_DEPLOY enabled: not waiting for Render; exiting after API trigger" | tee -a "$GITHUB_STEP_SUMMARY"
              exit 0
            fi
            # Extract deploy id using Python (stdin)
            DEPLOY_ID=$(python3 -c "import json,sys; data=sys.stdin.read(); print(json.loads(data).get('id',''))" <<< "$DEPLOY_JSON")
            if [[ -z "$DEPLOY_ID" ]]; then
              echo "Failed to parse deploy id; response:" >&2
              echo "$DEPLOY_JSON" >&2
              exit 1
            fi
            echo "Deploy ID: $DEPLOY_ID" >> "$GITHUB_STEP_SUMMARY"

            # Poll deploy status until success/failure or timeout (bounded by job timeout)
            echo "Polling Render deploy status..."
            ATTEMPTS=0
            SLEEP_SECS=5
            while true; do
              STATUS_JSON=$(curl -fsSL -H "Authorization: Bearer $RENDER_API_KEY" \
                "https://api.render.com/v1/deploys/$DEPLOY_ID") || true
              STATUS=$(python3 -c "import json,sys; data=sys.stdin.read(); print(json.loads(data or '{}').get('status',''))" <<< "$STATUS_JSON")
              if [[ "$STATUS" == "live" ]]; then
                echo "Render deploy successful (status: $STATUS)" | tee -a "$GITHUB_STEP_SUMMARY"
                break
              fi
              if [[ "$STATUS" == "failed" || "$STATUS" == "canceled" ]]; then
                echo "Render deploy failed (status: $STATUS)" | tee -a "$GITHUB_STEP_SUMMARY"
                exit 1
              fi
              ATTEMPTS=$((ATTEMPTS+1))
              if (( ATTEMPTS > 100 )); then
                echo "Timeout waiting for deploy to complete" | tee -a "$GITHUB_STEP_SUMMARY"
                exit 1
              fi
              sleep "$SLEEP_SECS"
            done
            exit 0
          fi
          echo "No Render deployment method configured. Set RENDER_DEPLOY_HOOK_URL or both RENDER_API_KEY and RENDER_SERVICE_ID as secrets."

      - name: Health check (optional)
        if: success()
        env:
          HEALTH_URL: ${{ startsWith(github.ref, 'refs/heads/main') && secrets.RENDER_HEALTH_URL || secrets.RENDER_STAGING_HEALTH_URL }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${HEALTH_URL:-}" ]]; then
            echo "No HEALTH_URL configured; skipping health check" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          echo "Checking service health at $HEALTH_URL ..."
          for i in {1..30}; do
            CODE=$(curl --retry 2 --retry-delay 1 -fsS -o /dev/null -w "%{http_code}" --max-time 10 "$HEALTH_URL" || true)
            if [[ "$CODE" == "200" || "$CODE" == "204" ]]; then
              echo "Health check passed ($CODE)" | tee -a "$GITHUB_STEP_SUMMARY"
              exit 0
            fi
            sleep 5
          done
          echo "Health check failed; last status: ${CODE:-none}" | tee -a "$GITHUB_STEP_SUMMARY"
          exit 1

      - name: Notify (optional)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          JOB_STATUS: ${{ job.status }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${SLACK_WEBHOOK_URL:-}" && -z "${DISCORD_WEBHOOK_URL:-}" ]]; then
            exit 0
          fi
          JOB_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MSG="Render deploy ${JOB_STATUS} for ${GITHUB_REPOSITORY}@${GITHUB_REF}. Run: ${JOB_URL}"
          if [[ -n "${SLACK_WEBHOOK_URL:-}" ]]; then
            curl -fsSL -X POST -H 'Content-type: application/json' --data "{\"text\": \"${MSG//\"/\\\"}\"}" "$SLACK_WEBHOOK_URL" || true
          fi
          if [[ -n "${DISCORD_WEBHOOK_URL:-}" ]]; then
            curl -fsSL -X POST -H 'Content-type: application/json' --data "{\"content\": \"${MSG//\"/\\\"}\"}" "$DISCORD_WEBHOOK_URL" || true
          fi



# trigger: no-op change to start deploy workflow

      - name: Expose asset links (TWA)
        if: success()
        shell: bash
        run: |
          echo "If hosting under this repo, ensure '/.well-known/assetlinks.json' serves the file at 'suggestly-ai-platform/assetlinks.json'."
