name: Deploy Backend to Render

on:
  push:
    branches: ["main"]
    paths:
      - "src/**"
      - "requirements.txt"
      - "render.yaml"
      - ".github/workflows/deploy-backend-render.yml"
  workflow_dispatch: {}

# Cancel any in-progress deploy for the same workflow and ref (branch/tag)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Render Blueprint Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    environment: production
    steps:
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${RENDER_DEPLOY_HOOK_URL:-}" ]]; then
            echo "Triggering Render deploy via Deploy Hook"
            curl --retry 5 --retry-connrefused --retry-delay 2 --max-time 120 -fsSL -X POST "$RENDER_DEPLOY_HOOK_URL"
            echo "Deploy hook triggered" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          if [[ -n "${RENDER_API_KEY:-}" && -n "${RENDER_SERVICE_ID:-}" ]]; then
            echo "Triggering Render deploy via API"
            # Trigger new deploy and capture response
            DEPLOY_JSON=$(curl --retry 5 --retry-connrefused --retry-delay 2 --max-time 120 -fsSL -X POST \
              -H "Authorization: Bearer $RENDER_API_KEY" \
              -H "Content-Type: application/json" \
              "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
              -d '{}')
            echo "API deploy triggered" >> "$GITHUB_STEP_SUMMARY"
            # Extract deploy id using Python (stdin)
            DEPLOY_ID=$(python3 -c "import json,sys; data=sys.stdin.read(); print(json.loads(data).get('id',''))" <<< "$DEPLOY_JSON")
            if [[ -z "$DEPLOY_ID" ]]; then
              echo "Failed to parse deploy id; response:" >&2
              echo "$DEPLOY_JSON" >&2
              exit 1
            fi
            echo "Deploy ID: $DEPLOY_ID" >> "$GITHUB_STEP_SUMMARY"

            # Poll deploy status until success/failure or timeout (bounded by job timeout)
            echo "Polling Render deploy status..."
            ATTEMPTS=0
            SLEEP_SECS=5
            while true; do
              STATUS_JSON=$(curl -fsSL -H "Authorization: Bearer $RENDER_API_KEY" \
                "https://api.render.com/v1/deploys/$DEPLOY_ID") || true
              STATUS=$(python3 -c "import json,sys; data=sys.stdin.read(); print(json.loads(data or '{}').get('status',''))" <<< "$STATUS_JSON")
              if [[ "$STATUS" == "live" ]]; then
                echo "Render deploy successful (status: $STATUS)" | tee -a "$GITHUB_STEP_SUMMARY"
                break
              fi
              if [[ "$STATUS" == "failed" || "$STATUS" == "canceled" ]]; then
                echo "Render deploy failed (status: $STATUS)" | tee -a "$GITHUB_STEP_SUMMARY"
                exit 1
              fi
              ATTEMPTS=$((ATTEMPTS+1))
              if (( ATTEMPTS > 100 )); then
                echo "Timeout waiting for deploy to complete" | tee -a "$GITHUB_STEP_SUMMARY"
                exit 1
              fi
              sleep "$SLEEP_SECS"
            done
            exit 0
          fi
          echo "No Render deployment method configured. Set RENDER_DEPLOY_HOOK_URL or both RENDER_API_KEY and RENDER_SERVICE_ID as secrets."

      - name: Notify (optional)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          JOB_STATUS: ${{ job.status }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${SLACK_WEBHOOK_URL:-}" && -z "${DISCORD_WEBHOOK_URL:-}" ]]; then
            exit 0
          fi
          JOB_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MSG="Render deploy ${JOB_STATUS} for ${GITHUB_REPOSITORY}@${GITHUB_REF}. Run: ${JOB_URL}"
          if [[ -n "${SLACK_WEBHOOK_URL:-}" ]]; then
            curl -fsSL -X POST -H 'Content-type: application/json' --data "{\"text\": \"${MSG//\"/\\\"}\"}" "$SLACK_WEBHOOK_URL" || true
          fi
          if [[ -n "${DISCORD_WEBHOOK_URL:-}" ]]; then
            curl -fsSL -X POST -H 'Content-type: application/json' --data "{\"content\": \"${MSG//\"/\\\"}\"}" "$DISCORD_WEBHOOK_URL" || true
          fi


