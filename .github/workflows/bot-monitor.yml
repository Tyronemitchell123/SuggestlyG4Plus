name: Bot Activity Monitor

on:
  schedule:
    # Run daily at 8:00 AM UTC to monitor bot activity
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      alert_type:
        description: 'Type of alerts to monitor'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependabot
          - codeql
          - security

jobs:
  monitor-dependabot:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      issues: write
      contents: read
    
    steps:
      - name: Monitor Dependabot PRs
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get open Dependabot PRs
            const prs = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open'
            });
            
            const dependabotPRs = prs.data.filter(pr => 
              pr.user.login === 'dependabot[bot]' || 
              pr.user.type === 'Bot'
            );
            
            // Check for stale Dependabot PRs (older than 7 days)
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
            
            const stalePRs = dependabotPRs.filter(pr => 
              new Date(pr.created_at) < sevenDaysAgo
            );
            
            // Check for failed CI on Dependabot PRs
            const failedCIPRs = [];
            for (const pr of dependabotPRs) {
              try {
                const checks = await github.rest.checks.listForRef({
                  owner,
                  repo,
                  ref: pr.head.sha
                });
                
                const failedChecks = checks.data.check_runs.filter(check => 
                  check.status === 'completed' && check.conclusion === 'failure'
                );
                
                if (failedChecks.length > 0) {
                  failedCIPRs.push({
                    pr: pr,
                    failedChecks: failedChecks.map(check => check.name)
                  });
                }
              } catch (error) {
                console.log(`Could not get checks for PR #${pr.number}: ${error.message}`);
              }
            }
            
            console.log(`Found ${dependabotPRs.length} open Dependabot PRs`);
            console.log(`Found ${stalePRs.length} stale Dependabot PRs`);
            console.log(`Found ${failedCIPRs.length} Dependabot PRs with failed CI`);
            
            // Create alert if there are issues
            if (stalePRs.length > 0 || failedCIPRs.length > 0) {
              let alertBody = `# ü§ñ Dependabot Alert Report\n\n`;
              alertBody += `**Date:** ${new Date().toISOString().split('T')[0]}\n\n`;
              
              if (stalePRs.length > 0) {
                alertBody += `## ‚è∞ Stale Dependabot PRs (${stalePRs.length})\n\n`;
                alertBody += `The following Dependabot PRs have been open for more than 7 days and may need attention:\n\n`;
                
                for (const pr of stalePRs) {
                  alertBody += `- [#${pr.number}](${pr.html_url}) - ${pr.title} (created ${new Date(pr.created_at).toDateString()})\n`;
                }
                alertBody += `\n`;
              }
              
              if (failedCIPRs.length > 0) {
                alertBody += `## ‚ùå Failed CI on Dependabot PRs (${failedCIPRs.length})\n\n`;
                alertBody += `The following Dependabot PRs have failed CI checks:\n\n`;
                
                for (const item of failedCIPRs) {
                  alertBody += `- [#${item.pr.number}](${item.pr.html_url}) - ${item.pr.title}\n`;
                  alertBody += `  - Failed checks: ${item.failedChecks.join(', ')}\n`;
                }
                alertBody += `\n`;
              }
              
              alertBody += `## üîß Recommended Actions\n\n`;
              alertBody += `- Review and merge or close stale PRs\n`;
              alertBody += `- Investigate and fix failing CI checks\n`;
              alertBody += `- Consider updating Dependabot configuration if issues persist\n`;
              alertBody += `- Monitor for security-critical updates that need immediate attention\n\n`;
              alertBody += `---\n\n`;
              alertBody += `*This alert was automatically generated by the Bot Activity Monitor workflow.*`;
              
              await github.rest.issues.create({
                owner,
                repo,
                title: `ü§ñ Dependabot Alert - ${stalePRs.length} stale PRs, ${failedCIPRs.length} failed CI`,
                body: alertBody,
                labels: ['bot-alert', 'dependabot', 'maintenance']
              });
            }

  monitor-codeql:
    runs-on: ubuntu-latest
    permissions:
      security-events: read
      issues: write
      contents: read
    
    steps:
      - name: Monitor CodeQL Alerts
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            try {
              // Get code scanning alerts
              const alerts = await github.rest.codeScanning.listAlertsForRepo({
                owner,
                repo,
                state: 'open'
              });
              
              // Categorize alerts by severity
              const criticalAlerts = alerts.data.filter(alert => 
                alert.rule.severity === 'error' || alert.rule.security_severity_level === 'critical'
              );
              
              const highAlerts = alerts.data.filter(alert => 
                alert.rule.severity === 'warning' || alert.rule.security_severity_level === 'high'
              );
              
              // Check for old alerts (older than 30 days)
              const thirtyDaysAgo = new Date();
              thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
              
              const oldAlerts = alerts.data.filter(alert => 
                new Date(alert.created_at) < thirtyDaysAgo
              );
              
              console.log(`Found ${alerts.data.length} open CodeQL alerts`);
              console.log(`Found ${criticalAlerts.length} critical alerts`);
              console.log(`Found ${highAlerts.length} high severity alerts`);
              console.log(`Found ${oldAlerts.length} alerts older than 30 days`);
              
              // Create alert if there are critical issues or too many old alerts
              if (criticalAlerts.length > 0 || oldAlerts.length > 10) {
                let alertBody = `# üõ°Ô∏è CodeQL Alert Report\n\n`;
                alertBody += `**Date:** ${new Date().toISOString().split('T')[0]}\n\n`;
                alertBody += `**Total Open Alerts:** ${alerts.data.length}\n\n`;
                
                if (criticalAlerts.length > 0) {
                  alertBody += `## üö® Critical Security Alerts (${criticalAlerts.length})\n\n`;
                  alertBody += `The following critical security issues require immediate attention:\n\n`;
                  
                  for (const alert of criticalAlerts.slice(0, 10)) { // Limit to first 10
                    alertBody += `- **${alert.rule.name}** - ${alert.rule.description}\n`;
                    alertBody += `  - Severity: ${alert.rule.severity}\n`;
                    alertBody += `  - Location: ${alert.most_recent_instance.location.path}:${alert.most_recent_instance.location.start_line}\n`;
                    alertBody += `  - [View Alert](${alert.html_url})\n\n`;
                  }
                }
                
                if (oldAlerts.length > 10) {
                  alertBody += `## ‚è∞ Stale Alerts (${oldAlerts.length})\n\n`;
                  alertBody += `There are ${oldAlerts.length} alerts older than 30 days. Consider reviewing and addressing these to prevent alert fatigue.\n\n`;
                }
                
                alertBody += `## üîß Recommended Actions\n\n`;
                alertBody += `- Prioritize fixing critical and high severity alerts\n`;
                alertBody += `- Review and dismiss false positives\n`;
                alertBody += `- Update CodeQL configuration if needed\n`;
                alertBody += `- Consider suppressions for known acceptable risks\n\n`;
                alertBody += `---\n\n`;
                alertBody += `*This alert was automatically generated by the Bot Activity Monitor workflow.*`;
                
                await github.rest.issues.create({
                  owner,
                  repo,
                  title: `üõ°Ô∏è CodeQL Alert - ${criticalAlerts.length} critical, ${oldAlerts.length} stale`,
                  body: alertBody,
                  labels: ['bot-alert', 'security', 'codeql', 'priority:high']
                });
              }
            } catch (error) {
              console.log(`Error accessing CodeQL alerts: ${error.message}`);
              
              // Create issue about access problems
              await github.rest.issues.create({
                owner,
                repo,
                title: `üõ°Ô∏è CodeQL Monitoring Issue - Cannot access alerts`,
                body: `# CodeQL Access Issue\n\nThe Bot Activity Monitor workflow cannot access CodeQL alerts.\n\n**Error:** ${error.message}\n\n## Possible Causes\n\n- CodeQL may not be enabled for this repository\n- Insufficient permissions for the workflow\n- Repository may not have code scanning alerts\n\n## Recommended Actions\n\n- Verify CodeQL is enabled in repository settings\n- Check workflow permissions\n- Ensure code scanning is configured properly\n\n---\n\n*This alert was automatically generated by the Bot Activity Monitor workflow.*`,
                labels: ['bot-alert', 'codeql', 'configuration']
              });
            }

  monitor-security-advisories:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: Check for Security Advisories
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            try {
              // Get repository vulnerability alerts
              const vulnerabilities = await github.rest.repos.listVulnerabilityAlerts({
                owner,
                repo
              });
              
              console.log(`Found ${vulnerabilities.data.length} vulnerability alerts`);
              
              if (vulnerabilities.data.length > 0) {
                let alertBody = `# üö® Security Advisory Alert\n\n`;
                alertBody += `**Date:** ${new Date().toISOString().split('T')[0]}\n\n`;
                alertBody += `**Total Vulnerability Alerts:** ${vulnerabilities.data.length}\n\n`;
                
                alertBody += `## üîç Active Vulnerabilities\n\n`;
                
                for (const vuln of vulnerabilities.data.slice(0, 10)) { // Limit to first 10
                  alertBody += `- **${vuln.security_advisory.summary}**\n`;
                  alertBody += `  - Severity: ${vuln.security_advisory.severity}\n`;
                  alertBody += `  - Package: ${vuln.security_vulnerability.package.name}\n`;
                  alertBody += `  - Vulnerable Range: ${vuln.security_vulnerability.vulnerable_version_range}\n`;
                  if (vuln.security_vulnerability.first_patched_version) {
                    alertBody += `  - Patched Version: ${vuln.security_vulnerability.first_patched_version.identifier}\n`;
                  }
                  alertBody += `\n`;
                }
                
                alertBody += `## üîß Recommended Actions\n\n`;
                alertBody += `- Update vulnerable dependencies immediately\n`;
                alertBody += `- Review Dependabot PRs for security updates\n`;
                alertBody += `- Consider manual updates for critical vulnerabilities\n`;
                alertBody += `- Review and test updates in staging environment\n\n`;
                alertBody += `---\n\n`;
                alertBody += `*This alert was automatically generated by the Bot Activity Monitor workflow.*`;
                
                await github.rest.issues.create({
                  owner,
                  repo,
                  title: `üö® Security Advisory Alert - ${vulnerabilities.data.length} vulnerabilities found`,
                  body: alertBody,
                  labels: ['bot-alert', 'security', 'vulnerability', 'priority:critical']
                });
              }
            } catch (error) {
              console.log(`Error accessing vulnerability alerts: ${error.message}`);
              // Don't create an issue for this as it might not be enabled
            }

  generate-summary:
    needs: [monitor-dependabot, monitor-codeql, monitor-security-advisories]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate Daily Summary
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Bot Activity Monitor completed for today');
            console.log('Check individual job outputs for any alerts generated');
            
            // Log summary of monitoring activities
            const summary = {
              date: new Date().toISOString().split('T')[0],
              dependabot_monitoring: '${{ needs.monitor-dependabot.result }}',
              codeql_monitoring: '${{ needs.monitor-codeql.result }}',
              security_monitoring: '${{ needs.monitor-security-advisories.result }}'
            };
            
            console.log('Monitoring Summary:', JSON.stringify(summary, null, 2));