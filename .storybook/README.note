# Storybook Performance Notes

## Why Performance Controls Exist

Storybook runs in isolation, which means:
- 3D heavy scenes are controlled via props to avoid performance issues in CI
- Complex animations can be paused or disabled for testing
- Large components can be rendered in simplified states

## Performance Controls

### forceFallback
- Renders static card versions instead of interactive 3D
- Use when testing on low-end devices or CI environments
- Helps with visual regression testing

### debugReducedMotion
- Simulates users with `prefers-reduced-motion: reduce`
- Disables animations and transitions
- Essential for accessibility compliance

### startPaused
- Begins complex components in paused state
- Prevents automatic animations from running
- Useful for testing specific states

## Best Practices

1. **Always provide fallback states** for heavy components
2. **Test with reduced motion** to ensure accessibility
3. **Use static renders** for CI/CD pipelines
4. **Monitor bundle size** impact of 3D libraries
5. **Implement lazy loading** for complex scenes

## CI/CD Considerations

- Storybook builds must complete within reasonable time limits
- Visual regression tests need consistent rendering
- Accessibility tests require stable component states
- Performance budgets should be enforced
